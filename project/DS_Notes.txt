Data Structure : many ways of organising data.

Array : String data of same type.
1D , 2D , 3D
String[] cars = {"BMW","Volvo","Ford"};
int[] num = {1,2,3,4};

Diference between memory and storage
----------------------------------------
storage > memory(ex : 4,6 8,10 gb)
memory is faster than storage


Program for class and object
-----------------------------------
class : describes the contents of the objects that belongs to it.
object: An element or instance of a class.

class HelloWorld {
    public static void main(String[] args) {
        Person p1 = new Person("Allice","aggressive",false);
        p1.sitDown();
        System.out.println("P1 Done\n");
        
        Person p2 = new Person("John","calm",true);
        p2.standUp();
        System.out.println("P2 Done");
    }
}
class Person{
    String name;
    String personality;
    boolean isSitting;
    
    Person(String n,String p,boolean i)
    {
        this.name = n;
        this.personality = p;
        this.isSitting = i;
    }
    void sitDown(){
        this.isSitting = true;
        print();
    }
    void standUp(){
        this.isSitting = false;
        print();
    }
    void print(){
        System.out.println("Name : "+name);
        System.out.println("Personality : "+personality);
        System.out.println("Sitting : "+isSitting);
    }
}

output:

Name : Allice
Personality : aggressive
Sitting : true
P1 Done

Name : John
Personality : calm
Sitting : false
P2 Done
_______________________________________________________________________________________________

Linked list
-> Data structure for storing a collection of items.

Array -> 6 5 4 3 2 1
linked list -> 6->5->->4->3
               |   |
	 head.data |
                 head.next.data

_________________________________________________________________________________________________
linked list

public class TestTrees {
    public static void main(String[] args) {
        // Our example tree looks like this:
        //         2
        //       /   \
        //      3     4
        //     / \
        //    5   6

        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        Node node5 = new Node(5);
        Node node6 = new Node(6);

        node2.left = node3;
        node2.right = node4;
        node3.left = node5;
        node3.right = node6;

        System.out.println("Sum of all values of this tree is (should print 20):");
        System.out.println(sumValues(node2));
    }

    static int sumValues(Node root) {
        if (root == null) {
            return 0;
        }
        return root.data + sumValues(root.left) + sumValues(root.right);
    }
}

class Node {
    int data;
    Node left;
    Node right;

    Node(int data) {
        this.data = data;
    }
}

__________________________________________________________________________________________________
Linked List
-----------------

import java.io.*;
public class LinkedList {
    Node head; // head of list
    static class Node {
        int data;
        Node next;
        Node(int d)
        {
            data = d;
            next = null;
        }
    }
    // Method to insert a new node
    public static LinkedList insert(LinkedList list, int data)
    {
        // Create a new node with given data
        Node new_node = new Node(data);
        new_node.next = null;
   
        // If the Linked List is empty,
        // then make the new node as head
        if (list.head == null) {
            list.head = new_node;
        }
        else {
            // Else traverse till the last node
            // and insert the new_node there
            Node last = list.head;
            while (last.next != null) {
                last = last.next;
            }
            // Insert the new_node at last node
            last.next = new_node;
        }
        // Return the list by head
        return list;
    }
    // Method to print the LinkedList.
    public static void printList(LinkedList list)
    {
        Node currNode = list.head;
        System.out.print("LinkedList: ");
        // Traverse through the LinkedList
        while (currNode != null) {
            // Print the data at current node
            System.out.print(currNode.data + " ");
            // Go to next node
            currNode = currNode.next;
        }
    }
    
    // Driver code
    public static void main(String[] args)
    {
        /* Start with the empty list. */
        LinkedList list = new LinkedList();
        // ******INSERTION******
        list = insert(list, 10);
        list = insert(list, 55);
        list = insert(list, 35);
        list = insert(list, 76);
        list = insert(list, 50);
        list = insert(list, 16);
        list = insert(list, 72);
        list = insert(list, 58);
   
        // Print the LinkedList
        printList(list);
    }
}

__________________________________________________________________________________
Recursion
---------------------
class FactorialEx{  
 static int factorial(int n){    
  if (n == 0)    
    return 1;    
  else    
    return(n * factorial(n-1));    
 }    
 public static void main(String args[]){  
  int i,fact=1;  
  int number=4;
  fact = factorial(number);   
  System.out.println("Factorial of "+number+" is: "+fact);    
 }  
}  